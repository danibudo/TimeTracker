@startuml

interface Activity {

Project ownerProject
String name
long startTime
long endTime
long duration

void acceptVisitor(Visitor visitor)
void setName(final String activityName)
String getName()
void setOwnerProject(final Project project)
Project getOwnerProject()
void setEndTime(final long endingTime)
void setStartTime(final long startingTime)
long getStartTime()
void setDuration(final long milliseconds)
long getDuration()
}

class Project extends Activity {
private List<Activity> activities

Project(final Project ownerProject, final String projectName)
long getDuration()
void acceptVisitor(final Visitor visitor)
void addActivity(final Activity activity)
void removeActivity(final Activity activity)
void start(final long time)
void stop()
boolean hasRunningTasks()
ArrayList<Activity> getActivities()

}

Project o-- Activity

abstract class Task extends Activity {

List<Interval> intervals
addInterval(final Interval interval)
void removeInterval(final Interval interval)
List<Interval> getIntervals()
void setIntervals(final List<Interval> intervalList)
Task getTask()
boolean isRunning()
void start()

}




class TaskImpl extends Task {

TaskImpl(final Project ownerProject, final String taskName)
long getDuration()
void acceptVisitor(Visitor visitor)
void start()
void stop()
boolean isRunning()

}

class PreprogrammedTask extends TaskDecorator {

long startTime

PreprogrammedTask(final Task task, final long milliseconds)
long getStartTime()

}

abstract class TaskDecorator extends Task {

Task task

TaskDecorator(final Task decoratedTask)
Task getTask()
void setStartTime(final long milliseconds)
void setEndTime(final long milliseconds)
long getStartTime()
long getEndTime()
long getDuration()
acceptVisitor(final Visitor visitor)
start()
isRunning()

}

TaskDecorator o-- Task

interface Visitor {

void visitProject(Project project);
void visitTask(Task task);
void propertyChange(final PropertyChangeEvent propertyChangeEvent);

}

class Printer implements Visitor {
Project rootProject

Printer(final Project project)
void visitProject(final Project project)
void visitTask(final Task task)
void propertyChange(final PropertyChangeEvent propertyChangeEvent)
void printHeader()
}

class Interval {
long startTime
long endTime
long duration


Interval(final long startTime, final long finishTime)
Interval(final long startTime)
long getDuration()
void stop()
void setStartTime(final long milliseconds)
void setEndTime(final long milliseconds)
long getStartTime()
long getEndTime()
void propertyChange(final PropertyChangeEvent propertyChangeEvent)

}

Interval --* Task


class Clock {
Date currentTime;
PropertyChangeSupport support;
ScheduledExecutorService executor;
static Clock instance;

Clock()
static Clock getInstance()
getCurrentTime()
void addPropertyChangeListener(final PropertyChangeListener pcl)
void removePropertyChangeListener(final PropertyChangeListener pcl)
void tick()
run()

}

class Time {

static final int HOURS_IN_DAY
static final int MINUTES_IN_HOUR
static final int SECONDS_IN_MINUTE
static final int MILLISECONDS_IN_SECOND

Time()
long getDays(final long milliseconds)
long getHours(final long milliseconds)
long getMinutes(final long milliseconds)
long getSeconds(final long milliseconds)
long setDays(final int days)
long setHours(final int hours)
long setMinutes(final int minutes)
long setSeconds(final int seconds)
String getDateAndTime(final long milliseconds)
String getTime(final long milliseconds)

}


class limitedTask extends TaskDecorator {
long endTime

LimitedTask(final Task task, final long milliseconds)
long getEndTime()
void start()
Project getOwnerProject()

}

class Client {

void main()

testA1()
testA2()
decoratorTest()

}

Printer *-- Project

Client -- Clock
Clock -- Interval
Client -- Printer

Time -- Printer
Time --Client
@enduml